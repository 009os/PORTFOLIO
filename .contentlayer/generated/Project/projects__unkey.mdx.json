{
  "published": true,
  "title": "Funding Fee Arbitrage",
  "description": "A production-grade crypto arbitrage trading system that exploits funding rate inefficiencies across Binance, Bybit, and OKX. Built with NestJS, Prisma, Redis, and WebSocket-based real-time execution.",
  "date": "2024-12-01T00:00:00.000Z",
  "repository": "009os/Funding-Fee-Arbitrage-System",
  "body": {
    "raw": "\n**_Funding Fee Arbitrage_** is a production-grade trading system designed to automate delta-neutral strategies and consistently capture positive funding rates across major crypto exchanges like **_Binance_**, **_Bybit_**, and **_OKX_**. The system actively monitors funding rates, places offsetting positions, and dynamically manages trades based on user-defined configurations.\n\nIt features a modular backend built with **_NestJS_**, using **_Prisma ORM_** for database interactions and **_Redis_** for fast, in-memory data caching and queue management. The system integrates both **_REST_** and **_WebSocket APIs_** for live order execution, position tracking, and robust error handling.\n\n**_This was developed as part of a proprietary company project. While the full system remains private, selected backend modules have been made publicly available to showcase the architecture and implementation approach._**\n",
    "code": "var Component=(()=>{var m=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},o=(t,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!p.call(t,i)&&i!==r&&a(t,i,{get:()=>e[i],enumerable:!(s=h(e,i))||s.enumerable});return t};var y=(t,e,r)=>(r=t!=null?m(u(t)):{},o(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),x=t=>o(a({},\"__esModule\",{value:!0}),t);var c=b((S,d)=>{d.exports=_jsx_runtime});var _={};f(_,{default:()=>v,frontmatter:()=>j});var n=y(c()),j={title:\"Funding Fee Arbitrage\",description:\"A production-grade crypto arbitrage trading system that exploits funding rate inefficiencies across Binance, Bybit, and OKX. Built with NestJS, Prisma, Redis, and WebSocket-based real-time execution.\",date:\"2024-12-01\",published:!0,repository:\"009os/Funding-Fee-Arbitrage-System\"};function l(t){let e=Object.assign({p:\"p\",strong:\"strong\",em:\"em\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"Funding Fee Arbitrage\"})}),\" is a production-grade trading system designed to automate delta-neutral strategies and consistently capture positive funding rates across major crypto exchanges like \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"Binance\"})}),\", \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"Bybit\"})}),\", and \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"OKX\"})}),\". The system actively monitors funding rates, places offsetting positions, and dynamically manages trades based on user-defined configurations.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It features a modular backend built with \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"NestJS\"})}),\", using \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"Prisma ORM\"})}),\" for database interactions and \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"Redis\"})}),\" for fast, in-memory data caching and queue management. The system integrates both \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"REST\"})}),\" and \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"WebSocket APIs\"})}),\" for live order execution, position tracking, and robust error handling.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.em,{children:\"This was developed as part of a proprietary company project. While the full system remains private, selected backend modules have been made publicly available to showcase the architecture and implementation approach.\"})})})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var v=F;return x(_);})();\n;return Component;"
  },
  "_id": "projects/unkey.mdx",
  "_raw": {
    "sourceFilePath": "projects/unkey.mdx",
    "sourceFileName": "unkey.mdx",
    "sourceFileDir": "projects",
    "contentType": "mdx",
    "flattenedPath": "projects/unkey"
  },
  "type": "Project",
  "path": "/projects/unkey",
  "slug": "unkey"
}